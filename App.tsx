import React, { useState, useMemo, useEffect } from 'react';
import { transactions as rawTransactions } from './services/data';
import type { Transaction } from './types';
import SelectInput from './components/SelectInput';
import ResultCard from './components/ResultCard';
import { BusIcon, HistoryIcon } from './components/icons';

// Natural sort for alphanumeric strings (e.g., '10A', '2', '10')
const naturalSort = (a: string, b: string) => {
  return a.localeCompare(b, undefined, { numeric: true, sensitivity: 'base' });
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —á–µ—Ä–µ–∑ WebApp
const sendToTelegram = async (transaction: Transaction, chatId: string | null) => {
  if (!chatId) {
    console.warn('‚ö†Ô∏è Chat ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.');
    return;
  }

  const escapeMarkdown = (text: string) => {
    const specials = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!'];
    return specials.reduce((acc, char) => acc.replace(new RegExp('\\' + char, 'g'), '\\' + char), text);
  };

  const message = `
*–ù–æ–≤—ã–π –±–∏–ª–µ—Ç –æ–ø–ª–∞—á–µ–Ω* üé´

*–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç:* ${escapeMarkdown(transaction.vehicleType)}
*–ù–æ–º–µ—Ä –¢–°:* ${escapeMarkdown(transaction.vehicleNumber)}
*–°—É–º–º–∞:* ${escapeMarkdown(transaction.amount)} ‚ÇΩ
*ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:* \`${escapeMarkdown(transaction.id)}\`

[–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É](${transaction.link})
  `;

  try {
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram WebApp...');
    const response = await fetch('/api/sendMessage', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ chatId, text: message })
    });

    if (!response.ok) {
      const errorText = await response.text();
      if (errorText.includes('CHANNEL_PRIVATE')) {
        alert('‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø.');
        console.warn('–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.');
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', errorText);
        alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
      return;
    }

    const data = await response.json();
    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', data);

  } catch (err: any) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', err.message);
    alert('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

const App: React.FC = () => {
  const [selectedType, setSelectedType] = useState<string>('');
  const [selectedVehicleNumber, setSelectedVehicleNumber] = useState<string>('');
  const [history, setHistory] = useState<Transaction[]>([]);
  const [chatId, setChatId] = useState<string | null>(null);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
  useEffect(() => {
    const tg = window.Telegram?.WebApp;
    if (!tg) {
      console.warn('‚ö†Ô∏è Telegram WebApp –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞.');
      return;
    }

    tg.ready();
    tg.expand();

    const userId = tg.initDataUnsafe?.user?.id;
    if (userId) {
      setChatId(String(userId));
      console.log('‚úÖ chatId –ø–æ–ª—É—á–µ–Ω:', userId);
    } else {
      console.warn('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ –±–æ—Ç–µ. chatId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.');
    }
  }, []);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const processedTransactions: Transaction[] = useMemo(() => {
    return (rawTransactions as any[]).map((t): Transaction => ({
      id: String(t.id),
      dateTime: t.date_time,
      vehicleType: t.vehicleType,
      vehicleNumber: String(t.vehicleNumber),
      amount: String(t.amount),
      link: t.link,
    }));
  }, []);

  const vehicleTypes = useMemo(() => {
    const types = new Set(processedTransactions.map(t => t.vehicleType));
    return Array.from(types).sort(naturalSort).map(type => ({ value: type, label: type }));
  }, [processedTransactions]);

  const vehicleNumbersForType = useMemo(() => {
    if (!selectedType) return [];
    const numbers = new Set(
      processedTransactions
        .filter(t => t.vehicleType === selectedType)
        .map(t => t.vehicleNumber)
    );
    return Array.from(numbers).sort(naturalSort).map(num => ({ value: num, label: num }));
  }, [selectedType, processedTransactions]);

  const selectedTransaction = useMemo(() => {
    if (!selectedType || !selectedVehicleNumber) return null;
    const candidates = processedTransactions.filter(
      t => t.vehicleType === selectedType && t.vehicleNumber === selectedVehicleNumber
    );
    if (candidates.length === 0) return null;
    candidates.sort((a, b) => new Date(b.dateTime).getTime() - new Date(a.dateTime).getTime());
    return candidates[0];
  }, [selectedType, selectedVehicleNumber, processedTransactions]);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  const handleSaveToHistory = (transactionToSave: Transaction) => {
    if (chatId) {
      sendToTelegram(transactionToSave, chatId);
    }

    const transactionWithCurrentDate = {
      ...transactionToSave,
      dateTime: new Date().toISOString(),
    };

    setHistory(prevHistory => {
      const otherItems = prevHistory.filter(item => item.id !== transactionWithCurrentDate.id);
      const newHistory = [transactionWithCurrentDate, ...otherItems];
      return newHistory.slice(0, 5);
    });
  };

  const handleTypeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setSelectedType(e.target.value);
    setSelectedVehicleNumber('');
  };

  const handleVehicleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setSelectedVehicleNumber(e.target.value);
  };

  const handleHistoryClick = (transaction: Transaction) => {
    setSelectedType(transaction.vehicleType);
    setSelectedVehicleNumber(transaction.vehicleNumber);
  };

  return (
    <div className="min-h-screen text-white flex flex-col items-center justify-center p-4 selection:bg-cyan-500/30">
      <div className="w-full max-w-md mx-auto">
        <header className="text-center mb-8">
          <div className="inline-flex justify-center items-center gap-4 mb-4 bg-slate-800/50 p-4 rounded-full border border-slate-700">
            <BusIcon className="w-10 h-10 text-cyan-400" />
          </div>
          <h1 className="text-3xl font-bold tracking-tight text-slate-100">–û–ø–ª–∞—Ç–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞</h1>
          <p className="text-slate-400 mt-2">–ù–∞–π–¥–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞.</p>
        </header>

        <main className="bg-slate-800/50 p-6 rounded-xl shadow-lg border border-slate-700 backdrop-blur-sm">
          <div className="flex flex-col space-y-6">
            <SelectInput
              label="–¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"
              value={selectedType}
              onChange={handleTypeChange}
              options={vehicleTypes}
              placeholder="-- –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç --"
            />
            <SelectInput
              label="–ù–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"
              value={selectedVehicleNumber}
              onChange={handleVehicleChange}
              options={vehicleNumbersForType}
              placeholder={selectedType ? "-- –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä --" : "-- –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç --"}
              disabled={!selectedType || vehicleNumbersForType.length === 0}
            />
          </div>
        </main>

        {selectedTransaction && <ResultCard transaction={selectedTransaction} onSave={handleSaveToHistory} />}

        {history.length > 0 && (
          <div className="w-full max-w-md mt-8">
            <h2 className="flex items-center text-lg font-semibold text-slate-300 mb-3">
              <HistoryIcon className="w-5 h-5 mr-2 text-slate-400" />
              –ò—Å—Ç–æ—Ä–∏—è –±–∏–ª–µ—Ç–æ–≤
            </h2>
            <div className="space-y-2">
              {history.map(ticket => (
                <button
                  key={ticket.id}
                  onClick={() => handleHistoryClick(ticket)}
                  className="w-full text-left p-3 bg-slate-800/50 border border-slate-700 rounded-lg hover:bg-slate-700/50 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-cyan-500"
                >
                  <p className="font-medium text-slate-200">{ticket.vehicleType} &middot; –¢–° {ticket.vehicleNumber}</p>
                  <p className="text-sm text-slate-400">
                    ID: {ticket.id} &middot; {ticket.amount} ‚ÇΩ &middot;{' '}
                    {new Date(ticket.dateTime).toLocaleString('ru-RU')}
                  </p>
                </button>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default App;
